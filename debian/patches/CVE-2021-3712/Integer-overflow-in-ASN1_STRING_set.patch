From: Pauli <paul.dale@oracle.com>
Date: Mon, 6 Apr 2020 09:23:00 +1000
Subject: Integer overflow in ASN1_STRING_set.

Addressing a potential integer overflow condition.

Reviewed-by: Tomas Mraz <tmraz@fedoraproject.org>
(Merged from https://github.com/openssl/openssl/pull/11473)

(cherry picked from commit 96218269f4c2da82f143727fb7697d572c190bc5)
---
 crypto/asn1/asn1_lib.c | 21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

Index: openssl-1.0.1t/crypto/asn1/asn1_lib.c
===================================================================
--- openssl-1.0.1t.orig/crypto/asn1/asn1_lib.c	2021-10-22 15:59:36.447730194 +0200
+++ openssl-1.0.1t/crypto/asn1/asn1_lib.c	2021-10-22 16:02:41.143760608 +0200
@@ -355,18 +355,29 @@
     return ret;
 }
 
-int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
+int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len_in)
 {
     unsigned char *c;
     const char *data = _data;
+    size_t len;
 
-    if (len < 0) {
+    if (len_in < 0) {
         if (data == NULL)
             return (0);
-        else
-            len = strlen(data);
+        len = strlen(data);
+    } else {
+        len = (size_t)len_in;
     }
-    if ((str->length < len) || (str->data == NULL)) {
+    /*
+     * Verify that the length fits within an integer for assignment to
+     * str->length below.  The additional 1 is subtracted to allow for the
+     * '\0' terminator even though this isn't strictly necessary.
+     */
+    if (len > INT_MAX - 1) {
+        ASN1err(0, ASN1_R_TOO_LONG);
+        return 0;
+    }
+    if ((size_t)str->length <= len || str->data == NULL) {
         c = str->data;
         if (c == NULL)
             str->data = OPENSSL_malloc(len + 1);
